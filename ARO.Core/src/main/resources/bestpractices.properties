bestPractice.header=BEST PRACTICES

statics.csvUnits.mbytes=MBytes

units.mbytes=MBytes
units.seconds=seconds

caching.duplicateContent.title=File Download: Duplicate Content
caching.duplicateContent.detailedTitle=Duplicate Content
caching.duplicateContent.desc=This test measures duplicate content. Excess duplicate content means that content was downloaded multiple times, which leads to slower applications and wasted bandwidth.
caching.duplicateContent.results=Your trace had {0}% duplicated TCP content. By reducing the&nbsp;<a href="#">duplicate content</a>&nbsp;({1} items, {2}MB of {3}MB total TCP content), your application will appear faster to your customers.
caching.duplicateContent.pass=Your trace passes with an acceptable level of duplicate content. Your trace had 3 or less duplicate items downloaded.

#{0} for url base
caching.duplicateContent.url=http://developer.att.com/{0}/BestPractices/DuplicateContent

caching.usingCache.title=File Download: Cache Control
caching.usingCache.detailedTitle=Cache Control
caching.usingCache.desc=This test measures the presence of cache headers. For all content that should be stored in the cache the best practice is to make sure that your server is adding the appropriate cache headers.

#{0} for application short name
caching.usingCache.results={0} detected the absence of&nbsp;<a href="#">cache headers</a>&nbsp;{1}% of times.  Cache headers prevent your files from being downloaded in a duplicate manner.
caching.usingCache.pass=Your data is populated with cache headers and it passes this test.

#{0} for url base
caching.usingCache.url=http://developer.att.com/{0}/BestPractices/UsingCache

caching.cacheControl.title=File Download: Content Expiration
caching.cacheControl.detailedTitle=Content Expiration
caching.cacheControl.desc=This test compares the number of "304 not modified" requests versus files that should be cached but were downloaded multiple times. 
caching.cacheControl.results=Your trace contained {0} duplicate files with&nbsp;"<a href="#">not expired</a>"&nbsp;cache headers and received {1}&nbsp;<a>304 responses</a>&nbsp;for expired files.
caching.cacheControl.pass=It appears that content expiration is being handled properly. No caching issues were detected in this trace and it passes this test.

#{0} for url base
caching.cacheControl.url=http://developer.att.com/{0}/BestPractices/CacheControl

caching.prefetching.title=File Download: Content Pre-fetching
caching.prefetching.detailedTitle=Content Pre-fetching
caching.prefetching.desc=This test measures multiple user input bursts all in a row. Prefetching may help speed up an app in these situations. Downloading files "as needed" can slow the user experience. If a user scrolls through the main screen of your application and has to wait for images to load, the application appears slow.

#{0} for application short name
caching.prefetching.results={0} detected {1} user input&nbsp;<a href="#">bursts</a>&nbsp;in a row. Consider pre-fetching your data (downloading all at once) to reduce the time your application is connected to the network.
caching.prefetching.pass=The files in this trace seem to be downloaded in reasonable bursts, and it passes this test. Remember that this may need to change as user behavior changes.

#{0} for url base
caching.prefetching.url=http://developer.att.com/{0}/BestPractices/Prefetching

connections.connectionOpening.title=Connections: Connection Opening
connections.connectionOpening.detailedTitle=Connection Opening
connections.connectionOpening.desc=This test helps ensure connections are opened properly. Some connection startups consists of an input burst, followed by a series of bursts spread out over time which can dramatically slow down the application's response time and waste energy on the device.  This is a self test.
connections.connectionOpening.selfEvaluation=If you see many application-initiated bursts, consider a transaction manager to group these more closely together.

#{0} for url base
connections.connectionOpening.url=http://developer.att.com/{0}/BestPractices/OpeningConnections

connections.unnecssaryConn.title=Connections: Unnecessary Connections - Multiple Simultaneous Connections
connections.unnecssaryConn.detailedTitle=Unnecessary Connections - Multiple Simultaneous Connections
connections.unnecssaryConn.desc=This test measures bursts that could be more tightly grouped. Syncing all of your data connections can help reduce the amount of time your application is on the network, reducing the battery drain. That will also make your content appear to load faster to the user.
connections.unnecssaryConn.results={0} sets of&nbsp;<a href="#">bursts</a>&nbsp;that could be more tightly grouped.
connections.unnecssaryConn.pass=It appears that the data in this trace is grouped together well, and it passes this test.

#{0} for url base
connections.unnecssaryConn.url=http://developer.att.com/{0}/BestPractices/TCPConnections

connections.periodic.title=Connections: Inefficient Connections - Periodic Transfers
connections.periodic.detailedTitle=Inefficient Connections - Periodic Transfers
connections.periodic.desc=This test helps ensure that your periodic connections are truly needed for the customer, which if not handled properly could cause excessive power drain.
connections.periodic.results=There were {0} different&nbsp;<a href="#">connections</a>&nbsp;which were repeated a total of {1} times with a minimum repeat time of {2} seconds.
connections.periodic.result=There was {0} different&nbsp;<a href="#">connection</a>&nbsp;which was repeated a total of {1} times with a minimum repeat time of {2} seconds.
connections.periodic.pass=No periodic transfers were detected in this trace. It may be worthwhile to look for connections that happened regularly, but are not at exact intervals. This can cause excessive battery drain.

#{0} for url base
connections.periodic.url=http://developer.att.com/{0}/BestPractices/PeriodicTransfers

connections.screenRotation.title=Connections: Inefficient Connections - Screen Rotation
connections.screenRotation.detailedTitle=Inefficient Connections - Screen Rotation
connections.screenRotation.desc=This test tracks screen rotation, to see if the app is pinging the server on orientation changes, or actually completely retransmit content. If you see this in your trace - consider a new layout for existing content (rather than re-download) or sending the orientation change later as a part of a larger data transmission.
connections.screenRotation.results=After rotating the screen, we detected a network traffic&nbsp;<a href="#">burst</a>. Consider reusing the content you have already downloaded in the previous layout, rather than downloading again.
connections.screenRotation.pass=Either no screen rotations were noted or the screen rotations did not trigger network activity.

#{0} for url base
connections.screenRotation.url=http://developer.att.com/{0}/BestPractices/ScreenRotations

connections.connClosing.title=Connections: Inefficient Connections - Connection Closing Problems
connections.connClosing.detailedTitle=Inefficient Connections - Connection Closing Problems
connections.connClosing.desc=This test checks that connections are closed promptly. If not effectively closed with the last data, the server timeout can turn the radio on just to close your connections, which wastes power and bandwidth.

#{0} for application short name
connections.connClosing.results={0} detected that {1} Joules ({2}% of the total energy) was used to control these&nbsp;<a href="#">connections</a>. By closing connections promptly, you will reduce battery drain.
connections.connClosing.pass=Connections appear to be closed promptly in this trace, and it passes this test.

#{0} for url base
connections.connClosing.url=http://developer.att.com/{0}/BestPractices/ClosingConnections

connections.offloadingToWifi.title=Connections: Inefficient Connections - Offloading to WiFi when Possible
connections.offloadingToWifi.detailedTitle=Inefficient Connections - Offloading to WiFi when Possible
connections.offloadingToWifi.desc=This test is a check to see if you are transmitting large chunks of data. When this occurs you may consider offloading to WiFi when appropriate.

#{0} for application short name
connections.offloadingToWifi.results={0} detected {1} large&nbsp;<a href="#">bursts</a>&nbsp;with high amounts of data in your trace.
connections.offloadingToWifi.pass=There were not many large bursts of data seen in this trace, and it passes this test.

connections.simultaneous.url=http://developer.att.com/ARO/BestPractices/ManyConnectionsOneIP
connections.simultaneous.table.col1=Time
connections.simultaneous.table.col2=Ip
connections.simultaneous.table.col3=Domain Name
connections.simultaneous.table.col4=No of Simultaneous connections
connections.simultaneous.title=Connections: Multiple Simultaneous Connections to One Endpoint
connections.simultaneous.detailedTitle=Multiple Simultaneous Connections to One Endpoint
connections.simultaneous.desc=When communicating to one server - you should minimize the number of connections per user \u2013 to conserve server capacity for your users.  Consider combining requests to this server into one large request, or piggybacking requests together
connections.simultaneous.results=Video Optimizer detected 3 or more simultaneous connections to the same server. Consider combining these requests to fewer (ideally one) connections to reduce connection load on your server.
connections.simultaneous.pass=In this trace we do not see 3 or more connections open simultaneously to the same server.

connections.multiSimultaneous.url=http://developer.att.com/ARO/BestPractices/MultipleConnectionsManyEndpoints
connections.multiSimultaneous.title=Connections: Multiple Simultaneous Connections to Many Endpoints
connections.multiSimultaneous.detailedTitle=Multiple Simultaneous Connections to Many Endpoints
connections.multiSimultaneous.desc=Opening many connections all at once can cause bottlenecks in slower network conditions.  Android limits the number of TCP connections to 15, and if you are opening that many connections, you must ensure that the customer facing data loads first.
connections.multiSimultaneous.results=In this trace, Video Optimizer detected 12 or more connections open at the same time.  With so many connections open, you might be limiting throughput of files, or even completely preventing files from being downloaded altogether.   Ensure that these connections are not blocking critical files for the end user, or that these connections close quickly to allow for other needed connections to be established.
connections.multiSimultaneous.pass=In this trace, we do not see 12 or more connections in use at the same time.

connections.adAnalytics.table.col4=Byte Count
connections.adAnalytics.url=http://developer.att.com/ARO/BestPractices/MultipleConnectionsManyEndpoints
connections.adAnalytics.title=Connections: Ads and Analytics
connections.adAnalytics.detailedTitle=Ads and Analytics
connections.adAnalytics.desc=Using ads and analytics services are a great way to monetize and understand how your customers are using your app.  But overuse of these services can impair the performance of your application.
connections.adAnalytics.results=In this trace, over 5% of connections, totally {0} bytes of data, were transmitted to support ads and analytics.
connections.adAnalytics.pass=In this trace, {0} discovered less than 5% of connections were caused by advertising and analytics.


#{0} for url base
connections.offloadingToWifi.url=http://developer.att.com/{0}/BestPractices/WifiOffload

connections.http4xx5xx.title=Connections: 400, 500 HTTP Status Response Codes
connections.http4xx5xx.detailedTitle=400, 500 HTTP Status Response Codes
connections.http4xx5xx.desc=HTTP status response codes in the 4xx range indicate a client request error, and 5xx codes indicate a server error.  There should be zero such errors in your application.
connections.http4xx5xx.errorSingular=1&nbsp;<a href="{0}">{0}</a>&nbsp; status response
connections.http4xx5xx.errorPlural={0}&nbsp;<a href="{1}">{1}</a>&nbsp;status responses
connections.http4xx5xx.errorList={0}, {1}
connections.http4xx5xx.errorListEnd={0} and {1}

#{0} for application short name
connections.http4xx5xx.results={0} detected {1} during the trace.
connections.http4xx5xx.pass=No 4xx or 5xx HTTP status response codes were detected during the trace.

#{0} for url base
connections.http4xx5xx.url=http://developer.att.com/{0}/BestPractices/HTTPcodes
connections.http4xx5xx.table.col1=Time
connections.http4xx5xx.table.col2=Domain Name
connections.http4xx5xx.table.col3=File Name
connections.http4xx5xx.table.col4=HTTP Code
connections.http4xx5xx.table.header=400,500 HTTP Status Response Codes

connections.http3xx.title=Connections: 301, 302 HTTP Status Response Codes
connections.http3xx.detailedTitle=301, 302 HTTP Status Response Codes
connections.http3xx.desc=Redirects are an easy way to switch users to different versions of your data. However, redirects also add significant latency to your application. Use with care.
connections.http3xx.errorSingular=1&nbsp;<a href="{0}">{0}</a>&nbsp;status response
connections.http3xx.errorPlural={0}&nbsp;<a href="{1}">{1}</a>&nbsp;status responses
connections.http3xx.errorList={0}, {1}
connections.http3xx.errorListEnd={0} and {1}

#{0} for application short name
connections.http3xx.results={0} detected {1} during the trace.
connections.http3xx.pass=No 301 or 302 HTTP status response codes were detected during the trace.

#{0} for url base
connections.http3xx.url=http://developer.att.com/{0}/BestPractices/300HTTPcodes
connections.http3xx.table.col1=Time
connections.http3xx.table.col2=Domain
connections.http3xx.table.col3=HTTP Code
connections.http3xx.table.col4=File Name
connections.http3xx.table.header=Files

other.accessingPeripherals.title=Other: Accessing Peripheral Applications
other.accessingPeripherals.detailedTitle=Accessing Peripheral Applications
other.accessingPeripherals.desc=This test reviews accessing device hardware applications like cameras, GPS, Bluetooth, speakers and WiFi, which can drain the battery. That's not a problem if your app is utilizing those peripherals, but many apps access peripherals they never utilize.
other.accessingPeripherals.results=During your trace,&nbsp;<a href="#">GPS</a>&nbsp;was active for {0}% of the time.&nbsp;<a href="#">Bluetooth</a>&nbsp;was active for {1}% of the time.&nbsp;<a href="#">Camera</a>&nbsp;was active for {2}% of the time.
other.accessingPeripherals.pass=Peripherals appear to be managed properly. Trace shows GPS was active for {0}% of the time. Bluetooth was active for {1}% of the time. Camera was active for {2}% of the time.

#{0} for url base
other.accessingPeripherals.url=http://developer.att.com/{0}/BestPractices/Peripherals

html.httpUsage.title=HTML: HTTP 1.0 Usage
html.httpUsage.detailedTitle=HTTP 1.0 Usage
html.httpUsage.desc=This test is just review to make sure you are using HTTP 1.1, which allows multiple items to be downloaded per connection, which is more efficient for your app.

#{0} for application short name
html.httpUsage.results={0} detected {1} HTTP 1.0&nbsp;<a href="#">headers</a>.
html.httpUsage.pass={0} detected {1} HTTP 1.0 headers, and it passes this test.

#{0} for url base
html.httpUsage.url=http://developer.att.com/{0}/BestPractices/HTTP1.0

html.asyncload.title=HTML: Asynchronous Load of JavaScript in HTML
html.asyncload.detailedTitle=Asynchronous Load of JavaScript in HTML
html.asyncload.desc=JavaScript loading blocks parallel downloads, and files downloaded in the HEAD of your HTML will block the rendering of your HTML. If you must load JavaScript in the HEAD, load asynchronously.

#{0} for application short name
html.asyncload.results={0} discovered {1} HTML files that use synchronous load of JavaScript in the HEAD.
html.asyncload.pass={0} discovered {1} HTML files loaded synchronously and it passes the test.

#{0} for url base
html.asyncload.url=http://developer.att.com/{0}/BestPractices/loadJSasynchronously
html.asyncload.table.header=Synchronous Loaded Files
html.asyncload.table.col1=Time
html.asyncload.table.col2=Host Name
html.asyncload.table.col3=File Name

html.fileorder.title=HTML: File Order
html.fileorder.detailedTitle=File Order
html.fileorder.desc=In the HEAD of your HTML, CSS files should always be loaded before JS files to ensure faster loading of your website. 

#{0} for application short name
html.fileorder.singresults={0} discovered {1} HTML file where JS is loaded immediately before CSS.
html.fileorder.pluresults={0} discovered {1} HTML files where JS is loaded immediately before CSS.
html.fileorder.pass={0} discovered 0 HTML file where JS is loaded immediately before CSS.

#{0} for url base
html.fileorder.url=http://developer.att.com/{0}/BestPractices/FileOrder
html.fileorder.table.header=Files where JS is loaded before CSS
html.fileorder.table.col1=Time
html.fileorder.table.col2=Host Name
html.fileorder.table.col3=File Name

html.displaynoneincss.title=HTML: "display:none" in CSS
html.displaynoneincss.detailedTitle="display:none" in CSS
html.displaynoneincss.desc=The CSS rule "display:none" is used to hide html objects from being shown on a page. However, this does not prevent the objects from being downloaded to the mobile device.  These extra objects (that are never displayed to the user), will slow down your app and waste data. 

#{0} for application short name
html.displaynoneincss.results={0} discovered {1} files with CSS command "display:none".
html.displaynoneincss.pass={0} discovered {1} files with no CSS rule "display:none" and it passes the test.

#{0} for url base
html.displaynoneincss.url=http://developer.att.com/{0}/BestPractices/displaynoneCSS
html.displaynoneincss.table.header=Files having CSS rule "display:none"
html.displaynoneincss.table.col1=Time
html.displaynoneincss.table.col2=File Name



textFileCompression.title=File Download: Text File Compression
textFileCompression.detailedTitle=Text File Compression
textFileCompression.desc=Sending compressed files over the network will speed delivery, and unzipping files on a device is a very low overhead operation. Ensure that all your text files are compressed while being sent over the network.

#{0} for application short name
textFileCompression.results={0} detected {3}% ({1}KB of {4}KB) of text files were sent without compression. Adding compression will speed the delivery of your content to your customers. (Note: Only files larger than {2} bytes are flagged.)
textFileCompression.pass={0} detected 0 text files above {1} bytes were sent without compression. Adding compression will speed the delivery of your content to your customers. (Note: Only files larger than {2} bytes are flagged.)

#{0} for url base
textFileCompression.url=http://developer.att.com/{0}/BestPractices/TextFileCompression
textFileCompression.table.header=Uncompressed Files 
textFileCompression.table.col1=Time
textFileCompression.table.col2=Host Name
textFileCompression.table.col3=File Size [B]
textFileCompression.table.col4=File Name

imageSize.title=File Download: Resize Images for Mobile
imageSize.detailedTitle=Resize Images for Mobile
imageSize.desc=Images that are not correctly sized for mobile can cause extreme delays in rendering.  Before delivering content to a mobile, resize it to fit the available area.

#{0} for application short name
imageSize.results={0} detected {1} image files that are 110% larger than the area specified for them. Consider resizing these images before delivering to the device.
imageSize.pass=Your trace passes. There are no image files that are 110% larger than the area specified for them.

#{0} for url base
imageSize.url=http://developer.att.com/{0}/BestPractices/ResizeMobileImages
imageSize.table.header=Image Files 
imageSize.table.col1=Time
imageSize.table.col2=Host Name
imageSize.table.col3=Image Size
imageSize.table.col4=Image Name

imageMetadata.title=File Download: Image Metadata
imageMetadata.detailedTitle=Image Metadata
imageMetadata.desc=Removing data from your images helps them download faster, speeding up rendering in your application. To reduce image size without compromising your image - consider removing metadata form the file

#{0} for application short name
imageMetadata.results={0} discovered {1} images with metadata present. Consider removing unneeded metadata from images on your server.
imageMetadata.pass=Your trace passes. There are no image files which has greater than 15% metadata (in KB). 

#{0} for url base
imageMetadata.url=http://developer.att.com/{0}/BestPractices/ImageMetadata
imageMetadata.table.header=Image Files 
imageMetadata.table.col1=Time
imageMetadata.table.col2=Image Name
imageMetadata.table.col3=Image Size KB
imageMetadata.table.col4=Metadata Size KB
imageMetadata.table.col5=% Savings

imageFormat.title=File Download: Image Format
imageFormat.detailedTitle=Image Format
imageFormat.desc=Newer image formats (like WebP for Android and JPEG2000 for iOS) feature the same visual quality as traditional formats (like JPEG and GIF, etc.) but offer much higher compression \u2013 resulting in less data use, and faster image delivery. 
imageFormat.results=In this trace, we discovered {0} images that are > 15% smaller when converted to a newer image format, saving {1} ({2}%).
imageFormat.pass=Your trace passes this test.  No images were found that were dramatically smaller with WebP or JPEG2000.


imageFormat.url=http://developer.att.com/{0}/BestPractices/ImageFormat
imageFormat.table.header=Image Files 
imageFormat.table.col1=Time
imageFormat.table.col2=Image Name 
imageFormat.table.col3=Image Size KB
imageFormat.table.col4=Formatted Image Size KB
imageFormat.table.col5=% Savings

imageCompression.title=File Download: Image Compression
imageCompression.detailedTitle=Image Compression
imageCompression.desc=Saving your image with a quality under 100% will reduce the size of the file. This will speed transfer, and use less data. Of course it also reduces the quality of your image, so I should be used with discretion. This test looks for images that are 15% smaller when saved at the 85% quality setting
imageCompression.results=If all of the images below were delivered at 85% compression, {0} less data would be used.
imageCompression.pass=All of the images canned in this trace were compressed similar to 85% quality.

uiComparator.title=File Download: Image Comparison
uiComparator.detailedTitle=Image Comparison
uiComparator.desc=This best practice compares the dimensions of downloaded images vs the dimensions displayed on the screen.  Large images that are resized use excess data, and require CPU cycles to render properly. This best practice fails if the displayed image utilizes 50% or under of the downloaded pixels.
uiComparator.results=We discovered {0} images that shedded >=50% of the pixels downloaded using properly sized images will reduce data usage and speed delivery.
uiComparator.pass=Images were not determined to be too large.
uiComparator.url=http://developer.att.com/{0}/BestPractices/ImageComparison
uiComparator.table.header=Image Files 
uiComparator.table.col1=Time
uiComparator.table.col2=Image Name 
uiComparator.table.col3= Downloaded Image Size (Pixels)
uiComparator.table.col4=UI Display Size (Pixels)
uiComparator.table.col5=% Savings
#{0} for url base
imageCompression.url=http://developer.att.com/{0}/BestPractices/ImageCompression
imageCompression.table.header=Image Files 
imageCompression.table.col1=Time
imageCompression.table.col2=Image Name
imageCompression.table.col3= Original Image Size
imageCompression.table.col4=85% Compressed Size
imageCompression.table.col5=70% Compressed Size

minification.title=File Download: Minify CSS, JS and HTML
minification.detailedTitle=Minify CSS, JS and HTML
minification.desc=Many text files contain excess whitespace to allow for better human coding. Run these files through a minifier to remove the whitespace in order to reduce file size.

#{0} for application short name
minification.results={0} detected {1} files that could be shrunk through minification, resulting in a {2} KB ({3}%) savings.
minification.pass=Your trace passes.

#{0} for url base
minification.url=http://developer.att.com/{0}/BestPractices/Minification
minification.table.header=Files 
minification.table.col1=Time
minification.table.col2=Host Name
minification.table.col3=Saving [%]
minification.table.col4=Saving [B]
minification.table.col5=File Name

empty.url.title=HTML: Empty Source and Link Attributes
empty.url.detailedTitle=Empty Source and Link Attributes
empty.url.desc=Many browsers still attempt to connect even if there is no url. This can cause delays in loading your site.
empty.url.results=<a href="#">{0}</a>&nbsp;files had HTML iframe, img, href, script, or link tags. 
empty.url.pass=Your trace passes.

#{0} for url base
empty.url.url=http://developer.att.com/{0}/BestPractices/EmptyHTMLTags

flash.title=HTML: FLASH
flash.detailedTitle=FLASH
flash.desc=Android and iOS platforms do not support Flash, therefore your content is unreadable to your users. Consider using an HTML5 video player instead.

#{0} for application short name
flash.results={0} discovered <a href="#">{1}</a>&nbsp;instances of Flash content. 
flash.pass=Your trace passes.

#{0} for url base
flash.url=http://developer.att.com/{0}/BestPractices/Flash

3rd.party.scripts.title=Connections: 3rd Party Scripts
3rd.party.scripts.detailedTitle=3rd Party Scripts
3rd.party.scripts.desc=Connecting to 3rd party content can create slowdowns in your app. If these external files fail to load, you can have a huge effect on the customer experience and load times. Consider loading these in an asynchronous manner.

#{0} for application short name
3rd.party.scripts.results={0} discovered&nbsp;<a href="#">{1}</a>&nbsp;pages with at least two external scripts called.
3rd.party.scripts.pass=Your trace passes.

#{0} for url base
3rd.party.scripts.url=http://developer.att.com/{0}/BestPractices/3rdPartyScripts

spriteimages.title=File Download: Use CSS Sprites for Images
spriteimages.detailedTitle=Use CSS Sprites for Images
spriteimages.desc=Small images can be combined into Sprites, and then rendered with CSS. This  will reduce the number of HTTP requests and speed the loading of your app.

#{0} for application short name
spriteimages.results={0} discovered {1} groups of small images downloaded at once. By grouping into one image and using sprites, downloads are streamlined, and files render more quickly.
spriteimages.pass=Your trace passes.

#{0} for url base
spriteimages.url=http://developer.att.com/{0}/BestPractices/CSSsprites
spriteimages.table.header=Files 
spriteimages.table.col1=Time
spriteimages.table.col2=Host Name
spriteimages.table.col3=File Size
spriteimages.table.col4=File Name

combinejscss.title=File Download: Combine JS and CSS Requests
combinejscss.detailedTitle=Combine JS and CSS Requests
combinejscss.desc=Multiple requests for CSS or JS can slow loading. Whenever possible, combine into as few files as possible.
combinejscss.results=In this trace, we see <a href="#">multiple CSS or Javascript</a>&nbsp;requests within 2 seconds of one another. Consider combining these files into one to reduce the number of requests, and thus reducing the latency to render the webpage.&nbsp;

#{0} for application short name
combinejscss.pass={0} found no issues with multiple CSS requests nor with multiple JavaScript requests.

#{0} for url base
combinejscss.url=http://developer.att.com/{0}/BestPractices/CombineJSandCSS

security.httpsUsage.title=Security: HTTPS Usage
security.httpsUsage.detailedTitle=HTTPS Usage
security.httpsUsage.desc=In general, sending data via HTTPS protects you and your customer's data while in transit over the network. In the table below, we list the domains/IPs where we have identified traffic that is not being encrypted.

#{0} for application short name
security.httpsUsage.results={0} discovered {1} non-HTTPS connections, which is {2}% of all the TCP sessions.
security.httpsUsage.pass={0} discovered {1} non-HTTPS connection and it passes the test.

#{0} for url base
security.httpsUsage.url=http://developer.att.com/{0}/BestPractices/HTTPS

security.transmissionPrivateData.title=Security: Transmission of Private Data
security.transmissionPrivateData.detailedTitle=Transmission of Private Data
security.transmissionPrivateData.desc=The transmission of private customer data is something that should be done with utmost care. In this trace, we found the following personal details being transmitted during the trace. If you must collect private data, make sure that you are using HTTPS, and even better, encrypt the data before sending.

#{0} for application short name
security.transmissionPrivateData.results={0} found {1} instances of private data being transmitted (note: only first instance to a server is listed below). Examine these transmissions to ensure that you require this data, and that you are securing this private data properly.
security.transmissionPrivateData.pass={0} discovered {1} transmissions and it passes the test.

#{0} for url base
security.transmissionPrivateData.url=http://developer.att.com/{0}/BestPractices/PrivateData

security.unsecureSSLVersion.title=Security: Unsecure SSL Version
security.unsecureSSLVersion.detailedTitle=Unsecure SSL Version
security.unsecureSSLVersion.desc=Encrypting your customer's data is a great start. This test is looking at the version of your encryption algorithm. Versions of SSL prior to TLS 1.0 are no longer considered secure, and should be upgraded.

#{0} for application short name
security.unsecureSSLVersion.results={0} discovered {1} connections using SSL versions prior to TLS 1.0, using older versions of SSL increase the risk that your data will be compromised in this trace.
security.unsecureSSLVersion.pass={0} discovered {1} connections using SSL versions prior to TLS 1.0.

#{0} for url base
security.unsecureSSLVersion.url=http://developer.att.com/{0}/BestPractices/UnsecureSSLVersion

security.weakCipher.title=Security: Weak Cipher
security.weakCipher.detailedTitle=Weak Cipher
security.weakCipher.desc=Cipher Suite is a named combination of authentication, encryption, message authentication code and key exchange algorithms used to negotiate the security settings for a network connection using TLS/SSL. Ciphers with 40 and 56 bit keys are considered as weak ciphers and client application should not provide weak ciphers for starting negotiation.

#{0} for application short name
security.weakCipher.results={0} discovered {1} weak ciphers in negotiate process.
security.weakCipher.pass={0} discovered {1} weak ciphers in negotiate process.

#{0} for url base
security.weakCipher.url=http://developer.att.com/{0}/BestPractices/WeakCipher

security.forwardSecrecy.title=Security: Forward Secrecy
security.forwardSecrecy.detailedTitle=Forward Secrecy
security.forwardSecrecy.desc=When encrypting data, it is important to fully secure the data. By using forward secrecy, you prevent the capture of one key allowing hackers to decrypt all of your traffic.

#{0} application short name
security.forwardSecrecy.results={0} discovered {1} ciphers in negotiate process, which do not support forward secrecy.
security.forwardSecrecy.pass={0} discovered {1} ciphers in negotiate process, which do not support forward secrecy.

#{0} for url base
security.forwardSecrecy.url=http://developer.att.com/{0}/BestPractices/ForwardSecrecy

#BpVideoPanel_1 see VideoStallImpl
videoStall.title=Video: Stalls
videoStall.detailedTitle=Stalls
videoStall.desc=Stalling occurs when either a user\u2019s device or their network cannot keep up with a video file when streaming. This results in a total pause of video playback.
videoStall.results=The video had {0} noticeable stall{1}. There {2} {3} stall{4} in the {5} range. Note that some stalls can be too short to observe.
videoStall.pass=Your video had zero noticeable stalls and passes the test.
videoStall.init=The actual startup delay has not yet been set. Your video had {0} noticeable stall and passes the test. Note that some stalls can be too short to observe.

#{0} for url base
videoStall.url=http://developer.att.com/{0}/BestPractices/VideoStalls

#BpVideoPanel_2 see VideoStartUpDelayImpl
startUpDelay.title=Video: Start-up Delay
startUpDelay.detailedTitle=Start-up Delay
startUpDelay.desc=Streaming video requires a startup delay for smooth delivery. In order to manage buffer occupancy, it is important to understand the startup delay and determine a way to cover this delay for the user with messaging.
startUpDelay.results=Your video had {0} second{1} of startup delay, your defined delay is {2} second{3}. You can determine buffer occupancy and manage the user experience.. 
startUpDelay.pass=Your video had {0} second{1} of startup delays and passes the test.
startUpDelay.empty=No video has been found in this trace, so there is nothing to analyze here.
startUpDelay.init=The actual startup delay has not yet been set. Your targeted delay is currently {0} second{1}. See <a href="#"><b>File->Preferences->Video</b></a> to change.

#{0} for url base
startUpDelay.url=http://developer.att.com/{0}/BestPractices/VideoStartupDelay

#BpVideoPanel_3 this is percentage of a maximum
bufferOccupancy.title=Video: Buffer Occupancy
bufferOccupancy.detailedTitle=Buffer Occupancy
bufferOccupancy.desc=Buffer occupancy is the amount of video stored in RAM to help prevent interruption due to transmission delays, known as "buffering".
bufferOccupancy.results=Your video reached {0}% ({1} MB) of the defined maximum buffer of {2} MBytes. See <a href="#"><b>File->Preferences->Video</b></a> to change.
bufferOccupancy.pass=passes the test.
bufferOccupancy.init=The actual startup delay has not yet been set. Your video reached {0}% ({1} MB) of the defined maximum buffer of {2} MBytes. See <a href="#"><b>File->Preferences->Video</b></a> to change.

#{0} for url base
bufferOccupancy.url=http://developer.att.com/{0}/BestPractices/BufferOccupancy

#BpVideoPanel_4 see VideoNetworkComparisonImpl
networkComparison.title=Video: Network Comparison
networkComparison.detailedTitle=Network Comparison
networkComparison.desc=Deliver video at a rate within the network capability, while factoring in the HTTP/TCP protocol behavior. 
networkComparison.results=Your network trace average throughput is {0} Kbps. Your video was delivered at the average of {1} Kbps rate of speed. 
networkComparison.pass=Your network trace average throughput is {0} Kbps.Your video was delivered at the average of {1} Kbps rate of speed and passes the test.

#{0} for url base
networkComparison.url=http://developer.att.com/{0}/BestPractices/NetworkComparison

#BpVideoPanel_5 see VideoTcpConnectionImpl
tcpConnection.title=Video: TCP Connection
tcpConnection.detailedTitle=TCP Connection
tcpConnection.desc=It is a good practice to maintain a reasonable number of TCP connections to deliver a single video.

#{0} for application short name
tcpConnection.results={0} detected {1} separate HTTP connection{2} for a single video.
tcpConnection.pass={0} detected {1} separate HTTP connection{2} and passes the test.

#{0} for url base
tcpConnection.url=http://developer.att.com/{0}/BestPractices/TCPComparison

#BpVideoPanel_6 see VideoChunkSizeImpl
chunkSize.title=Video: Segment Size
chunkSize.detailedTitle=Segment Size
chunkSize.desc=Streaming chunks vary in size. Understanding the size of chunks in a video stream can help to determine the most efficient chunk size.
chunkSize.results=There {0} {1} {2} chunk{3} with an average of {4} KB per segment. Consider reducing/increasing the size of chunks you are sending.
chunkSize.pass=There were {0} different chunks  and passes the test.

#{0} for url base
chunkSize.url=http://developer.att.com/{0}/BestPractices/ChunkSize

#BpVideoPanel_7 see VideoChunkPacingImpl
chunkPacing.title=Video: Segment Pacing
chunkPacing.detailedTitle=Segment Pacing
chunkPacing.desc=Understanding the pacing of chunks in a video stream can help to determine the most efficient delivery.
chunkPacing.results=There {0} {1} {2} chunk{3} which {4} delivered with pace of {5} second{6}. Consider reducing/increasing the pace of chunks you are sending.
chunkPacing.pass=There were {0} different chunks and passes the test.

#{0} for url base
chunkPacing.url=http://developer.att.com/{0}/BestPractices/ChunkPacing

#BpVideoPanel_8 see VideoRedundancyImpl
videoRedundancy.title=Video: Redundancy
videoRedundancy.detailedTitle=Redundancy
videoRedundancy.desc=HTTP Streaming generates multiple versions of the same content in different quality, which allows the client to display the most appropriate version. Understanding the number and quality of these versions can help a developer avoid overkill.
videoRedundancy.results=There were {0}% redundant segments in this video.
videoRedundancy.pass=There were no redundant segments in this video.

#{0} for url base
videoRedundancy.url=http://developer.att.com/{0}/BestPractices/Redundancy

#BpVideoPanel_9 see VideoConcurrentSessionImpl
videoConcurrentSession.title=Video: Concurrent Session
videoConcurrentSession.detailedTitle=Concurrent Session
videoConcurrentSession.desc=Using too many concurrent sessions may cause problems with smooth delivery of content.
videoConcurrentSession.results=There was a maximum of {0} concurrent sessions as listed in the table.

#{0} for url base
videoConcurrentSession.url=http://developer.att.com/{0}/BestPractices/VideoConcurrentSession

#{0} for application short name
#bestPractices.header.result={0} Best Practices Results
bestPractices.header.summary=SUMMARY
bestPractices.header.statistics=TEST STATISTICS
bestPractices.header.testsConducted=TESTS CONDUCTED
bestPractices.header.cache=USING CACHE & CACHING PROBLEMS
bestPractices.header.cacheDescription=By utilizing a local cache on the device, content used more than once will be delivered instantly without a download delay.
bestPractices.header.connections=CONNECTIONS
bestPractices.header.connectionsDescription=Optimizing how you use the device's radio will speed the delivery of content and reduce your application's battery consumption.
bestPractices.header.others=OTHERS
bestPractices.header.othersDescription=Reducing the usage of device peripherals and optimizing your HTTP connectivity can further reduce your application's battery consumption.
bestPractices.header.fileDownload=FILE DOWNLOAD
bestPractices.header.fileDownloadDescription=Reducing the usage of network for file downloads can reduce your application's battery consumption.
bestPractices.header.html=HTML
bestPractices.header.htmlDescription=Reducing the usage of device peripherals and optimizing your HTTP connectivity can further reduce your application's battery consumption.
bestPractices.header.videoBestPractice=VIDEO
bestPractices.header.videoBestPracticeDescription=

bestPractices.header.page=Page {0}

bestPractices.pass=PASS
bestPractices.fail=FAIL
bestPractices.warning=WARNING

bestPractices.date=Date:
bestPractices.trace=Trace:
bestPractices.application=Application Name(s) : Version:
bestPractices.applicationversion=Data Collector Version:
bestPractices.devicemodel=Device Make/Model:
bestPractices.devicemodelvalue={0} / {1}
bestPractices.os.version=OS/Platform Version:
bestPractices.networktype=Network Type(s):
bestPractices.profile=Profile:

#{0} for application name
bestPractices.sideTitle={0}
bestPractices.duration=Duration:
bestPractices.durationValue={0} minutes
bestPractices.totalDataTransfered=Total Data Transferred: 
bestPractices.totalDataTransferedValue={0} bytes
bestPractices.videoData=Video Data:
bestPractices.energyConsumed=Energy Consumed:
bestPractices.TotalHTTPSData=Total HTTPS data:
bestPractices.TotalHTTPSDataValue= {0} ({1} KB)
bestPractices.HTTPSDataAnalyzed=HTTPS data analyzed:
bestPractices.HTTPSDataAnalyzedValue= {0} ({1} KB)
bestPractices.HTTPSDataNotAnalyzed=HTTPS data not analyzed:
bestPractices.HTTPSDataNotAnalyzedValue= {0} ({1} KB)
bestPractices.causesScore=Causes:
bestPractices.effectsScore=Effects:
bestPractices.totalAppScore=Total:
bestPractices.outofscore1= (out of 500)
bestPractices.outofscore2= (out of 1000)
bestPractices.outofscore3= (out of 50)
bestPractices.outofscore4= (out of 75)
bestPractices.outofscore5= (out of 150)
bestPractices.outofscore6= (out of 125)
bestPractices.outofscore7= (out of 62.5)
bestPractices.outofscore8= (out of 187.5)
bestPractices.scoreref=<a href="#">{0}</a>&nbsp;
bestPractices.energyConsumedValue={0} J (Energy)
bestPractices.test=Test:
bestPractices.About=About:
bestPractices.results=Results:
bestPractices.selfEvaluation=Self Evaluation:
bestPractices.selfTest=Self Test
bestPractices.learnMore=Learn more...
bestPractice.referSection=Refer to Section on {0}.
bestPractice.referSection.caching=File Download
bestPractice.referSection.connections=connections
bestPractice.referSection.others=others
bestPractice.referSection.fileDownload=File Download
bestPractice.referSection.html=HTML
bestPractice.tooltip.pass=Pass
bestPractice.tooltip.fail=Fail
bestPractice.tooltip.warning=Warning
bestPractice.tooltip.manual=Self Test

#regex.phone.number=\\d\{3\}-\\d\{3\}-\\d\{4\},-,3,8,-,7,4;\\d\{3\}\\s\\d\{3\}\\s\\d\{4\}, ,3,8, ,7,4;\\(\\d\{3\}\\)-\\d\{3\}-\\d\{4\},(,0,13,),4,9;\\(\\d\{3\}\\)\\d\{3\}-\\d\{4\},(,0,12,),4,8
#regex.date.birth=\\d\{2\}/\\d\{2\}/\\d\{4\},/,2,7,/,5,4;\\d\{2\}-\\d\{2\}-\\d\{4\},-,2,7,-,5,4
regex.credit.card.american.express=34\\d\{13\},3,0,14,4,1,13;37\\d\{13\},3,0,14,7,1,13
regex.credit.card.mastercard=51\\d\{14\},5,0,15,1,1,14;52\\d\{14\},5,0,15,2,1,14;53\\d\{14\},5,0,15,3,1,14;54\\d\{14\},5,0,15,4,1,14;55\\d\{14\},5,0,15,5,1,14
regex.credit.card.discover=6011\\d\{12\},6,0,15,1,2,13;622(12[6-9]|1[3-9][0-9]|[2-8][0-9][0-9]|9[0-1][0-9]|92[0-5])\\d\{10\},6,0,15,2,2,13;64[4-9]\\d\{13\},6,0,15,4,1,14;65\\d\{14\},6,0,15,5,1,14
regex.credit.card.visa=4\\d\{15\},4,0,15
#regex.ssn=\\d\{3\}-\\d\{2\}-\\d\{4\},-,3,7,-,6,4

Export.header.tracesummary=======TRACE SUMMARY=========
Export.header.filetypes=============FILE TYPES=========
Export.header.traceoverview=============TRACE BENCHMARKING=========
Export.header.connectionstatistics=============CONNECTION STATISTICS============
exportall.csvHeader.bestpractice===========BEST PRACTICES==========
exportall.csvPercentageHTTPSNotAnalyzedValue={0}
exportall.csvByteHTTPSNotAnalyzedValue=({0} KB)
exportall.csvPercentageHTTPSAnalyzedValue={0}
exportall.csvByteHTTPSAnalyzedValue=({0} KB)
exportall.csvPercentagetotalHTTPSValue={0}
exportall.csvBytetotalHTTPSValue=({0} KB)
exportall.csvPct=% duplicated TCP content
exportall.csvFiles=files
exportall.csvCacheConPct=% of files missing cache headers
exportall.csvCacheConNExpDesc=files downloaded multiple times while "not expired"
exportall.csvCacheCon304Desc=files cached and 304 returned from server
exportall.csvInefficientCssRequests=count of inefficient Css requests
exportall.csvInefficientJsRequests=count of inefficient Js requests
exportall.csvMultiConnDesc=count of bursts more tightly grouped
exportall.csvIneffConnDesc=connections
exportall.csvIneffConnRptDesc=# of repeats
exportall.csvIneffConnTimeDesc=s period of repeat
exportall.csvConnClosingDesc=joules was used to control these connections
exportall.csvPrefetchDesc=user input burst in a row
exportall.csvResizeImageDesc=count of images larger than 150% of area specified for them
exportall.csvSrcnRtnDesc=count of screen rotations that cause network activity
exportall.csvSrcnRtnDescPass=count of screen rotations
exportall.csvOffWiFiDesc=number of large bursts
exportall.csvHttpError=HTTP {0} response code(s)
exportall.csvAccGPSDesc=% GPS
exportall.csvAccBTDesc=% Bluetooth
exportall.csvAccCamDesc=% Camera
exportall.csvHTTPhdrDesc=count of HTTP 1.0 headers
exportall.csvTextFileCompression= text file(s) above {0} bytes were sent without compression
exportall.csvTextFileCompressionKb=kB of text files were sent without compression
exportall.csvNumberOfLargeImages=images larger than the area specified for them
exportall.csvNumberOfMdataImages=images with MetaData
exportall.csvNumberOfUIComparatorImages=Images larger than the area specified for them
exportall.csvNumberOfFilesWithDisplayNone=files with "display:none" CSS rule
exportall.csvNumberOfMinifyFiles=files to minify
exportall.csvNumberOfEmptyUrlFiles=empty HTML tag files
exportall.csvNumberOfFlashFiles=flash files
exportall.csvNumberOfScriptFiles=3rd party script files
exportall.csvNumberOfSpriteFiles=Image file groups to be used a sprite
exportall.csvNumberOfSmallRequest=Small requests to be minimized

#{0} for application short name
exportall.errorFileOpen={0} Analyzer not able to export a file : 
exportall.errorLongFileName=File name entered is very long. Please enter file name less than 50 characters.
exportall.csvSyncPacketCount=HTML files that uses synchronous load of JavaScript in the HEAD.
exportall.csvAsyncPacketCount=HTML files that uses asynchronous load of JavaScript in the HEAD.
exportall.csvFileOrderCount=HTML files which have JS loaded before CSS in the HEAD.
exportall.csvHttpsUsageHTTPDetected=HTTP Connections detected.
exportall.causesScore=Causes:
exportall.effectsScore=Effects:
exportall.totalAppScore=Total:
overview.traceoverview.value=Value
overview.traceoverview.percentile=Percentile
Export.traceoverview.throughput=Avg Rate: (kbps)
Export.traceoverview.jpkb=Energy Efficiency: (J/kb)
Export.traceoverview.promoratio=Signaling Overhead:
Export.sessionoverview.sessionTerm=Proper session termination
Export.sessionoverview.longBurstTerm=Large Burst connection
Export.sessionoverview.tightlyGroupedBurstTerm=Tightly grouped connection
Export.sessionoverview.periodicBurstTerm=Periodic Burst connection
Export.sessionoverview.nonPeriodicBurstTerm=Non-Periodic Burst connection

preferences.video.defaultSegmentRedundancyWarnVal = 15
preferences.video.defaultStartUpDelayWarnVal = 2.0000
preferences.video.defaultStallDurationWarnVal = 0.5000
preferences.video.defaultStartUpDelayFailVal= 3.0000
preferences.video.defaultStallDurationFailVal = 1.0000
preferences.video.defaultSegmentRedundancyFailVal = 25